给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。

返回使 A 中的每个值都是唯一的最少操作次数。

输入：[3,2,1,2,1,7]
输出：6
解释：经过 6 次 move 操作，数组将变为 [3, 4, 1, 2, 5, 7]。
可以看出 5 次或 5 次以下的 move 操作是不能让数组的每个值唯一的。

0 <= A.length <= 40000
0 <= A[i] < 40000

我们首先显然有一个放弃空间复杂度的想法， 暴力开一个80000个桶，每个桶来记录出现数字的次数，然后由低到高扫过去，每次只给每个桶保留一个数字
时间复杂度 O(n), 空间复杂度 O(n * 2) 异常的暴力。。

class Solution {
public:
    int minIncrementForUnique(vector<int>& A) {
        if (A.empty()) return 0; // 非法输入检验
        vector<int> cnt(80000, 0); //开桶
        for (auto x : A) cnt[x] ++; //计数
        int res = 0;
        for (int i = 0; i < 79999; ++ i) { //扫描一遍桶
            if (cnt[i] <= 1) continue; // 只有一个就不用管了
            res += cnt[i] - 1; // 积累答案
            cnt[i + 1] += cnt[i] - 1; //每个桶保留一个，剩下的全部 +1
        }
        return res;
    }
};

但是我们时间复杂度会虽然很好，但是空间开的有些过大， 要想一些平衡策略。
