题干 ：
给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。

如果数组元素个数小于 2，则返回 0。
示例 1:

输入: [3,6,9,1]
输出: 3
解释: 排序后的数组是 [1,3,6,9], 其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。
说明:
·你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。
·请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。
解决思路 ： 桶排序解决
根据值域建立合适大小的桶，同时每个桶只需要维护它内部的最小值和最大值， 之后我们记录前缀桶最大值，和当前桶最小值之差
记录所有差值里的 max 就是我们所求答案
时间复杂度 ：线性 O(n + k)
空间复杂度 ：O(k) k 为值域

/// 桶
class Bucket {
public:
    bool used = false;
    int minval = INT_MAX;       // 记录是否为空，最大值，最小值
    int maxval = INT_MIN;        
};
class Solution {
public:
    int maximumGap(vector<int>& nums) {
        if (nums.empty() or nums.size() < 2) //特殊条件判断
            return 0;

        int mnn = INT_MAX, mxx = INT_MIN, n = nums.size();
        for (auto x : nums) {
            mnn = min(mnn, x);
            mxx = max(mxx, x);
        }
        // 记录出最小值、最大值
        int bucketSize = max(1, (mxx - mnn) / (n - 1)); // 桶的大小
        int bucketNum = (mxx - mnn) / bucketSize + 1; // 桶的数量
        vector<Bucket> buckets(bucketNum);

        for (auto num : nums) {
            int bucketIdx = (num - mnn) / bucketSize; // 根据和最小值只差计算出数字属于哪个桶

            buckets[bucketIdx].used = true; //标记非空
            buckets[bucketIdx].minval = min(num, buckets[bucketIdx].minval); //更新最值
            buckets[bucketIdx].maxval = max(num, buckets[bucketIdx].maxval);
        }

        int pre = mnn, res = 0; // res 为答案， pre 为前缀最大值， 当然起始为 mnn
        for (auto bucket : buckets) {
            if (!bucket.used) continue; //跳过空桶

            res = max(res, bucket.minval - pre); //更新答案
            pre = bucket.maxval; //更新前缀最大值
        }

        return res;
    }
};
