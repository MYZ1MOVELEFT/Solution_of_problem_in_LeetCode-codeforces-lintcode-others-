一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。

简单dp,, 开始可以先开二维 f(i, j = {0， 1}) 代表 第i个数字取还是不取的调价下的最大值
但是显然没必要多开一维， f[i] = max(f[i - 1](不取),f[i - 2] + nums[i](取)) 

优化了一维空间

class Solution {
public:
    int massage(vector<int>& nums) {
        if (nums.empty()) return 0;
        int n = nums.size();
        if (n <= 1) return nums[0];
        vector<int> f(n, 0);
        f[0] = nums[0]; f[1] = max(nums[0], nums[1]);
        for (int i = 2; i < n; ++ i) {
            f[i] = max(f[i - 1], f[i - 2] + nums[i]);
        }
        return f[n - 1];
    }
};
